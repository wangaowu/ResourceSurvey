package com.bytemiracle.resourcesurvey.cache_greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bytemiracle.resourcesurvey.common.dbbean.DBFieldDict;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBFIELD_DICT".
*/
public class DBFieldDictDao extends AbstractDao<DBFieldDict, Long> {

    public static final String TABLENAME = "DBFIELD_DICT";

    /**
     * Properties of entity DBFieldDict.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectId = new Property(1, Long.class, "projectId", false, "PROJECT_ID");
        public final static Property LayerName = new Property(2, String.class, "layerName", false, "LAYER_NAME");
        public final static Property CheckType = new Property(3, int.class, "checkType", false, "CHECK_TYPE");
        public final static Property FieldName = new Property(4, String.class, "fieldName", false, "FIELD_NAME");
        public final static Property FieldValuePool = new Property(5, String.class, "fieldValuePool", false, "FIELD_VALUE_POOL");
    }


    public DBFieldDictDao(DaoConfig config) {
        super(config);
    }
    
    public DBFieldDictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBFIELD_DICT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_ID\" INTEGER," + // 1: projectId
                "\"LAYER_NAME\" TEXT," + // 2: layerName
                "\"CHECK_TYPE\" INTEGER NOT NULL ," + // 3: checkType
                "\"FIELD_NAME\" TEXT," + // 4: fieldName
                "\"FIELD_VALUE_POOL\" TEXT);"); // 5: fieldValuePool
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBFIELD_DICT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBFieldDict entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(2, projectId);
        }
 
        String layerName = entity.getLayerName();
        if (layerName != null) {
            stmt.bindString(3, layerName);
        }
        stmt.bindLong(4, entity.getCheckType());
 
        String fieldName = entity.getFieldName();
        if (fieldName != null) {
            stmt.bindString(5, fieldName);
        }
 
        String fieldValuePool = entity.getFieldValuePool();
        if (fieldValuePool != null) {
            stmt.bindString(6, fieldValuePool);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBFieldDict entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(2, projectId);
        }
 
        String layerName = entity.getLayerName();
        if (layerName != null) {
            stmt.bindString(3, layerName);
        }
        stmt.bindLong(4, entity.getCheckType());
 
        String fieldName = entity.getFieldName();
        if (fieldName != null) {
            stmt.bindString(5, fieldName);
        }
 
        String fieldValuePool = entity.getFieldValuePool();
        if (fieldValuePool != null) {
            stmt.bindString(6, fieldValuePool);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBFieldDict readEntity(Cursor cursor, int offset) {
        DBFieldDict entity = new DBFieldDict( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // projectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // layerName
            cursor.getInt(offset + 3), // checkType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fieldName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // fieldValuePool
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBFieldDict entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLayerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckType(cursor.getInt(offset + 3));
        entity.setFieldName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFieldValuePool(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBFieldDict entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBFieldDict entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBFieldDict entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
