package com.bytemiracle.resourcesurvey.cache_greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bytemiracle.resourcesurvey.common.dbbean.DBProject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBPROJECT".
*/
public class DBProjectDao extends AbstractDao<DBProject, Long> {

    public static final String TABLENAME = "DBPROJECT";

    /**
     * Properties of entity DBProject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CreateBy = new Property(2, String.class, "createBy", false, "CREATE_BY");
        public final static Property PrjWKT = new Property(3, String.class, "prjWKT", false, "PRJ_WKT");
        public final static Property CreateTimestamps = new Property(4, long.class, "createTimestamps", false, "CREATE_TIMESTAMPS");
        public final static Property IsLatestProject = new Property(5, int.class, "isLatestProject", false, "IS_LATEST_PROJECT");
        public final static Property ProjectMediaWaterMark = new Property(6, String.class, "projectMediaWaterMark", false, "PROJECT_MEDIA_WATER_MARK");
        public final static Property FeatureMediaWaterMark = new Property(7, String.class, "featureMediaWaterMark", false, "FEATURE_MEDIA_WATER_MARK");
        public final static Property TrajectoryConfig = new Property(8, String.class, "trajectoryConfig", false, "TRAJECTORY_CONFIG");
        public final static Property RenderStyleConfig = new Property(9, String.class, "renderStyleConfig", false, "RENDER_STYLE_CONFIG");
        public final static Property Extra = new Property(10, String.class, "extra", false, "EXTRA");
    }

    private DaoSession daoSession;


    public DBProjectDao(DaoConfig config) {
        super(config);
    }
    
    public DBProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBPROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CREATE_BY\" TEXT," + // 2: createBy
                "\"PRJ_WKT\" TEXT," + // 3: prjWKT
                "\"CREATE_TIMESTAMPS\" INTEGER NOT NULL ," + // 4: createTimestamps
                "\"IS_LATEST_PROJECT\" INTEGER NOT NULL ," + // 5: isLatestProject
                "\"PROJECT_MEDIA_WATER_MARK\" TEXT," + // 6: projectMediaWaterMark
                "\"FEATURE_MEDIA_WATER_MARK\" TEXT," + // 7: featureMediaWaterMark
                "\"TRAJECTORY_CONFIG\" TEXT," + // 8: trajectoryConfig
                "\"RENDER_STYLE_CONFIG\" TEXT," + // 9: renderStyleConfig
                "\"EXTRA\" TEXT);"); // 10: extra
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBPROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBProject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String prjWKT = entity.getPrjWKT();
        if (prjWKT != null) {
            stmt.bindString(4, prjWKT);
        }
        stmt.bindLong(5, entity.getCreateTimestamps());
        stmt.bindLong(6, entity.getIsLatestProject());
 
        String projectMediaWaterMark = entity.getProjectMediaWaterMark();
        if (projectMediaWaterMark != null) {
            stmt.bindString(7, projectMediaWaterMark);
        }
 
        String featureMediaWaterMark = entity.getFeatureMediaWaterMark();
        if (featureMediaWaterMark != null) {
            stmt.bindString(8, featureMediaWaterMark);
        }
 
        String trajectoryConfig = entity.getTrajectoryConfig();
        if (trajectoryConfig != null) {
            stmt.bindString(9, trajectoryConfig);
        }
 
        String renderStyleConfig = entity.getRenderStyleConfig();
        if (renderStyleConfig != null) {
            stmt.bindString(10, renderStyleConfig);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBProject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String prjWKT = entity.getPrjWKT();
        if (prjWKT != null) {
            stmt.bindString(4, prjWKT);
        }
        stmt.bindLong(5, entity.getCreateTimestamps());
        stmt.bindLong(6, entity.getIsLatestProject());
 
        String projectMediaWaterMark = entity.getProjectMediaWaterMark();
        if (projectMediaWaterMark != null) {
            stmt.bindString(7, projectMediaWaterMark);
        }
 
        String featureMediaWaterMark = entity.getFeatureMediaWaterMark();
        if (featureMediaWaterMark != null) {
            stmt.bindString(8, featureMediaWaterMark);
        }
 
        String trajectoryConfig = entity.getTrajectoryConfig();
        if (trajectoryConfig != null) {
            stmt.bindString(9, trajectoryConfig);
        }
 
        String renderStyleConfig = entity.getRenderStyleConfig();
        if (renderStyleConfig != null) {
            stmt.bindString(10, renderStyleConfig);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
    }

    @Override
    protected final void attachEntity(DBProject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBProject readEntity(Cursor cursor, int offset) {
        DBProject entity = new DBProject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // prjWKT
            cursor.getLong(offset + 4), // createTimestamps
            cursor.getInt(offset + 5), // isLatestProject
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // projectMediaWaterMark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // featureMediaWaterMark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // trajectoryConfig
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // renderStyleConfig
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // extra
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBProject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrjWKT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTimestamps(cursor.getLong(offset + 4));
        entity.setIsLatestProject(cursor.getInt(offset + 5));
        entity.setProjectMediaWaterMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeatureMediaWaterMark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrajectoryConfig(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRenderStyleConfig(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExtra(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBProject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBProject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBProject entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
