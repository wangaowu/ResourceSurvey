package com.bytemiracle.resourcesurvey.cache_greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bytemiracle.resourcesurvey.modules.trajectory.bean.PrjTrajectory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRJ_TRAJECTORY".
*/
public class PrjTrajectoryDao extends AbstractDao<PrjTrajectory, Long> {

    public static final String TABLENAME = "PRJ_TRAJECTORY";

    /**
     * Properties of entity PrjTrajectory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectId = new Property(1, long.class, "projectId", false, "PROJECT_ID");
        public final static Property TrajectoryName = new Property(2, String.class, "trajectoryName", false, "TRAJECTORY_NAME");
        public final static Property PointNumber = new Property(3, long.class, "pointNumber", false, "POINT_NUMBER");
        public final static Property StartTime = new Property(4, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, long.class, "endTime", false, "END_TIME");
        public final static Property TrajectoryLength = new Property(6, double.class, "trajectoryLength", false, "TRAJECTORY_LENGTH");
        public final static Property IsSelected = new Property(7, boolean.class, "isSelected", false, "IS_SELECTED");
    }


    public PrjTrajectoryDao(DaoConfig config) {
        super(config);
    }
    
    public PrjTrajectoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRJ_TRAJECTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 1: projectId
                "\"TRAJECTORY_NAME\" TEXT," + // 2: trajectoryName
                "\"POINT_NUMBER\" INTEGER NOT NULL ," + // 3: pointNumber
                "\"START_TIME\" INTEGER NOT NULL ," + // 4: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 5: endTime
                "\"TRAJECTORY_LENGTH\" REAL NOT NULL ," + // 6: trajectoryLength
                "\"IS_SELECTED\" INTEGER NOT NULL );"); // 7: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRJ_TRAJECTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrjTrajectory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
 
        String trajectoryName = entity.getTrajectoryName();
        if (trajectoryName != null) {
            stmt.bindString(3, trajectoryName);
        }
        stmt.bindLong(4, entity.getPointNumber());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
        stmt.bindDouble(7, entity.getTrajectoryLength());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrjTrajectory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
 
        String trajectoryName = entity.getTrajectoryName();
        if (trajectoryName != null) {
            stmt.bindString(3, trajectoryName);
        }
        stmt.bindLong(4, entity.getPointNumber());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
        stmt.bindDouble(7, entity.getTrajectoryLength());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrjTrajectory readEntity(Cursor cursor, int offset) {
        PrjTrajectory entity = new PrjTrajectory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // projectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trajectoryName
            cursor.getLong(offset + 3), // pointNumber
            cursor.getLong(offset + 4), // startTime
            cursor.getLong(offset + 5), // endTime
            cursor.getDouble(offset + 6), // trajectoryLength
            cursor.getShort(offset + 7) != 0 // isSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrjTrajectory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectId(cursor.getLong(offset + 1));
        entity.setTrajectoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPointNumber(cursor.getLong(offset + 3));
        entity.setStartTime(cursor.getLong(offset + 4));
        entity.setEndTime(cursor.getLong(offset + 5));
        entity.setTrajectoryLength(cursor.getDouble(offset + 6));
        entity.setIsSelected(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrjTrajectory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrjTrajectory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrjTrajectory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
